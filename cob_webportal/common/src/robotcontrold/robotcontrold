#! /usr/bin/env python
import sys, time, signal, logging, logging.handlers, getopt
import socket
#from serverThread import ServerThread		import those two at the bottom, so we can check for
#from network.webServer import WebServer	MySQLdb support first
from utils.user import User


class Main():
	LOG_LEVELS = {
	   'debug': logging.DEBUG,
	   'info': logging.INFO,
	   'warning': logging.WARNING,
	   'error': logging.ERROR,
	   'critical': logging.CRITICAL
	}

	REQUIRED_ARGUMENTS = [ 'timeout=', 'trac=', 'log=', 'webPort='  ]
	OPTIONAL_ARGUMENTS = [ 'mysqlDb=', 'sqliteDb=', 'logLevel=', 'console', 'mysqlHost=', 'mysqlUser=', 'mysqlPw=' ]

	def __init__(self, argv):
		# default-timeout: 300
		self.timeout = 300
		self.tracEnv = None
		self.logPath = None
		self.args = None

		self.server = None
		self.webServer = None

		self.logLevel = self.LOG_LEVELS['info']
		self.log = None
		self.logHandler = None

		self.fileHandler = None
		self.streamHandler = None


		# Parse Arguments
		try:
			args = self.parseArgv(argv[1:])
		except getopt.GetoptError as e:
			sys.stderr.write ('An ArgumentError occured: %s\n' % str(e))
			sys.stderr.write ('Required Arguments: %s\n' % str(self.REQUIRED_ARGUMENTS))
			sys.stderr.write ('Optional Arguments: %s\n' % str(self.OPTIONAL_ARGUMENTS))
			sys.exit(1)


		# Was a logLevel passed (optional) and is it valid?
		if 'logLevel' in args:
			if args['logLevel'].lower() not in self.LOG_LEVELS:
				sys.stderr.write ('Invalid LogLevel passed: %s\nChose one of the following: %s\n' % (args['logLevel'], str(self.LOG_LEVELS.keys())))
				sys.exit(1)
			self.logLevel = self.LOG_LEVELS[args['logLevel'].lower()]

		
		# WebPort is numerical ?
		try:
			int(args['webPort'])
		except ValueError as e:
			sys.stderr.write ('The given WebPort "%s" is not numerical\n' % args['webPort'])
			sys.exit(1)


		# Create Log Instances
		self.createLogHandler(args['log'], self.logLevel, 'console' in args)
		self.log = self.getLogger('robotcontrold', self.logLevel)


		# Create the Server
		self.log.debug('Creating ServerThread')
		serverLog = self.getLogger('ServerThread', self.logLevel)
		try:
			self.server = ServerThread(serverLog, args)
		except Exception as e:
			self.log.exception('An unexpected error occured while creating the server')
			sys.stderr.write ('Critical.\n')
			sys.exit(1)

		
		# Create the WebServer
		self.log.debug('Creating WebServer')
		webServerLog = self.getLogger('WebServer', self.logLevel)
		try:
			self.webServer = WebServer(self.server, webServerLog, int(args['webPort']))
		except socket.error as e:
			self.log.exception ('An unexpected socket error occured while creating the webServer')
			if e.errno==13:
				self.log.critical ('Info: You need to be root to create a webServer on privileged ports (ports < 1024)')
			self.stop()
			sys.stderr.write ('Critical.\n')
			sys.exit(1)
		except Exception as e:
			self.log.exception ('An unexpected error occured while creating the webServer') 
			self.stop()
			sys.stderr.write ('Critical.\n')
			sys.exit(1)


		# Try to start server / webServer
		try:
			self.server.start()
			self.webServer.start()
		except Exception as e:
			self.log.exception ('An unexpected error occured trying to start server/webServer')
			self.stop()
			sys.stderr.write ('Critical.\n')
			sys.exit(1)

		signal.signal(signal.SIGINT, self.interruptHandler)
		signal.signal(signal.SIGTERM, self.interruptHandler)


		#TODO REMOVE TEST
#		self.server.prepareServerForNewUser(User('simon'))
#		time.sleep(10)
#		self.server.prepareServerForNewUser(None)
		#TODO REMOVE TEST

		# run as long as the the server runs
		while self.server.isAlive(): time.sleep(10)


	# make sure the server thread is stopped
	def __del__(self):
		if self.isAlive():
			print ('\n ! __del__ and Server Alive > Shutting down, this may take a moment')
			self.log.error('__del__ called and server is alive')
			self.stop()

	def isAlive(self):
		return self.server and self.server.isAlive()


	def stop(self):
		if self.server and self.server.isAlive():
			self.server.stop()
		if self.webServer and self.webServer.isAlive():
			self.webServer.stop()
			


	def parseArgv(self, argv):	
		# create the optlist argument based on the requiredNames and optional Names
		optlist, args = getopt.getopt(argv, '', list(i for i in self.REQUIRED_ARGUMENTS+self.OPTIONAL_ARGUMENTS))
		if len(args) > 0:
			raise getopt.GetoptError('Invalid argument(s) passed: %s' % str(args))

		# Check whether all required names are give
		# take only the key and remove -- at the beginning
		names = list(i[0].strip("--") for i in optlist)
		for req in self.REQUIRED_ARGUMENTS:
			# be careful to remove = at the end if given
			if req.strip('=') not in names:
				raise getopt.GetoptError('Missing argument: %s' % req)

	
		# Store values in self
		args = {}
		for key,value in optlist:
			# remove -- at the beginning of key
			args[key.strip("--")] = value
		
		return args
		


	def createLogHandler(self, logFile, logLevel, addStreamHandler=False):
		logFormatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')

		self.fileHandler = logging.handlers.RotatingFileHandler(logFile)
		self.fileHandler.setFormatter(logFormatter)

		if addStreamHandler:
			self.streamHandler = logging.StreamHandler()
			self.streamHandler.setFormatter(logFormatter)


	def getLogger(self, name, logLevel):
		logger = logging.getLogger(name)
		logger.setLevel(logLevel)

		logger.addHandler(self.fileHandler)
		if self.streamHandler:
			logger.addHandler(self.streamHandler)
		return logger


	def interruptHandler(self, *arg):
		if self.isAlive():
			if self.log:
				self.log.info ('SIGNAL received > Shutting down')
			self.stop()



if __name__=='__main__':
	if (sys.version_info[0] != 2 or sys.version_info[1] < 6):
		sys.stderr.write ('ERROR: At least Python Version 2.6 required!\n')
		sys.exit(1)
	

	# import those two after checking for MySQLdb
	from serverThread import ServerThread
	from network.webServer import WebServer
	Main(sys.argv)
	
